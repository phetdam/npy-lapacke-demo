# build and test. deploy will be implemented later.

name: build

# only build on schedule, during releases, or upon manual request
on:
  schedule:
  # daily 0423 UTC job, 0023 EST during DST and 2323 EST otherwise
  - cron: "23 4 * * *"
  push:
    tags:
    - v*
  workflow_dispatch:

env:
  # suppress warning + specify where to install built OpenBLAS binaries. can't
  # use env.GITHUB_WORKSPACE since this is only available to steps.
  USE_OPENBLAS: 1
  OPENBLAS_PATH: /opt/OpenBLAS
  # bot token required by github-action-slack-notify-build
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_ACTIONS_COURIER_TOKEN }}

jobs:
  # build 32-bit manylinux1, manylinux2010 wheels. MacOS is 64-bit.
  build_nix_32:
    runs-on: ubuntu-latest
    # Windows doesn't use bash shell by default
    defaults:
      run:
        shell: bash

    # defines manylinux specifications to build for
    strategy:
      matrix:
        manylinux: [manylinux1, manylinux2010]

    steps:
    - uses: actions/checkout@v2
    # OpenBLAS must be built on manylinux Docker image (i.e. with older tools)
    # else auditwheel errors, complaining about too-recent versioned symbols.
    - name: Get and unpack latest OpenBLAS release using GitHub CLI
      id: get-openblas
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
        gh release download -R xianyi/OpenBLAS -p '*.tar.gz'
        tar -xf *.tar.gz
    - name: Build and test wheels
      id: cibuildwheel
      uses: pypa/cibuildwheel@v2.0.1
      with:
        # to use the PyPA publish action, we want everything in dist
        output-dir: dist
      env:
        # python versions to build (skip PyPy). skip other manylinux archs
        CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
        CIBW_SKIP: "*-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x"
        # build only the 32-bit architectures
        CIBW_ARCHS: auto32
        # always use pip to build. install pre-install reqs for setup.py and
        # build OpenBLAS on the Docker image. repo mounted to /project.
        CIBW_BUILD_FRONTEND: pip
        CIBW_BEFORE_BUILD: |
          pip install -r install_requires.txt
          cd /project/$(echo *.tar.gz | sed s/.tar.gz//)
          make BINARY=32 USE_THREAD=1
          make PREFIX=$OPENBLAS_PATH install
        # build both manylinux1 and manylinux2010 for i686
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux }}
        # manually set OPENBLAS_PATH as part of env since we build in Docker
        CIBW_ENVIRONMENT: >-
          OPENBLAS_PATH=${{ env.OPENBLAS_PATH }}
          USE_OPENBLAS=${{ env.USE_OPENBLAS }}
        # extras_requires to install (also installs deps) + testing command
        CIBW_TEST_EXTRAS: tests
        CIBW_TEST_COMMAND: >
          pytest -rsxXP -v --pyargs npypacke.regression.tests &&
          pytest -rsxXP -v --pyargs npypacke.solvers.tests
        # increase pip verbosity during build so we can see compiler output
        CIBW_BUILD_VERBOSITY: 1
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        if-no-files-found: error
    - name: Notify Slack on job status and where the failure occurred
      if: failure()
      # always runs if a step has failed somewhere
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          ${{ github.job }} [job]: ${{ job.status }}
          ==============================
          get-openblas [step]: ${{ steps.get-openblas.outcome }}
          cibuildwheel [step]: ${{ steps.cibuildwheel.outcome }}
          ==============================
        color: danger

  # simply create tar.gz in dist which is uploaded to dist_artifact
  build_sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # setup.py uses NumPy's get_include function and setuptools
    - name: Install sdist requirements
      run: pip3 install -r install_requires.txt
    - name: Create tar.gz sdist
      run: python3 setup.py sdist
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist
        if-no-files-found: error
    # usually easy to see what has gone wrong so no status is set in env
    - name: Notify Slack on job status if failed
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: "${{ github.job_id }} [job]: ${{ job.status }}"
        color: danger

  # notifies final job success if all jobs succeeded
  notify_success:
    runs-on: ubuntu-latest
    needs: [build_sdist, build_nix_32]
    steps:
    - name: Notify Slack on overall workflow success
      if: success()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: Success!
        color: good