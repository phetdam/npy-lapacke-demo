# build and test. deploy will be implemented later.

name: build

# only build on schedule, during releases, or upon manual request
on:
  schedule:
  # daily 0423 UTC job, 0023 EST during DST and 2323 EST otherwise
  - cron: "23 4 * * *"
  push:
    tags:
    - v*
  workflow_dispatch:

env:
  # suppress warning + specify where to install built OpenBLAS binaries. can't
  # use env.GITHUB_WORKSPACE since this is only available to steps.
  USE_OPENBLAS: 1
  OPENBLAS_PATH: ${{ github.workspace }}/OpenBLAS
  # Python versions to build and Linux archs to skip, for cibuildwheel
  CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
  CIBW_SKIP: "*-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x"
  # always use pip to build. CIBW_BEFORE_BUILD varies per job.
  CIBW_BUILD_FRONTEND: pip
  # install pre-install reqs for setup.py before each individual wheel's build
  CIBW_BEFORE_BUILD: pip install -r install_requires.txt
  # extras_requires to install (also installs deps) + testing command
  CIBW_TEST_EXTRAS: tests
  CIBW_TEST_COMMAND: >
    pytest -rsxXP -v --pyargs npypacke.regression.tests &&
    pytest -rsxXP -v --pyargs npypacke.solvers.tests
  # increase pip verbosity during build so we can see compiler output
  CIBW_BUILD_VERBOSITY: 1
  # bot token required by github-action-slack-notify-build
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_ACTIONS_COURIER_TOKEN }}
  # delimiter separating job statuses from step statuses
  STEP_DELIM: ==============================

jobs:
  # get latest OpenBLAS source gzip tarball and upload. upload is very slow if
  # unpacked while local unpacking is fast so let each job unpack.
  get_openblas:
    runs-on: ubuntu-latest
    steps:
    - name: Get latest OpenBLAS release .tar.gz using GitHub CLI
      id: download-latest
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
        gh release download -R xianyi/OpenBLAS -p '*.tar.gz'
        echo "OPENBLAS_TGZ=$(echo *.tar.gz)" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v2
      id: upload-latest
      with:
        name: openblas-tar-gz
        path: ${{ env.OPENBLAS_TGZ }}
        if-no-files-found: error
    - name: Notify Slack on job failure
      # always runs if a step fails
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] download-latest: ${{ steps.download-latest.outcome }}
          [step] upload-latest: ${{ steps.upload-latest.outcome }}
        color: danger

  # simply create tar.gz in dist which is uploaded to dist_artifact
  build_sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # setup.py uses NumPy's get_include function and setuptools
    - name: Install sdist requirements
      id: before-install
      run: pip3 install -r install_requires.txt
    - name: Create tar.gz sdist
      id: create-sdist
      run: python3 setup.py sdist
    - name: Upload sdist artifact
      id: upload-sdist
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.tar.gz
        if-no-files-found: error
    - name: Notify Slack on job failure if job did not succeed
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] before-install: ${{ steps.before-install.outcome }}
          [step] create-sdist: ${{ steps.create-sdist.outcome }}
          [step] upload-sdist: ${{ steps.upload-sdist.outcome }}
        color: danger
  
  # build 32-bit manylinux1, manylinux2010 wheels. MacOS is 64-bit.
  build_nix_32:
    runs-on: ubuntu-latest
    needs: get_openblas
    strategy:
      matrix:
        manylinux: [manylinux1, manylinux2010]
    steps:
    - uses: actions/checkout@v2
    # download OpenBLAS tar.gz and unpack to current working directory. must be
    # built on manylinux Docker image (i.e. with older toolchain) else
    # auditwheel will complain about too-recent versioned symbols.
    - uses: actions/download-artifact@v2
      id: download-tar-gz
      with:
        name: openblas-tar-gz
    - name: Build and test wheels
      id: cibuildwheel
      uses: pypa/cibuildwheel@v2.0.1
      with:
        # to use the PyPA publish action, we want everything in dist
        output-dir: dist
      # see top-level env for other shared configuration values
      env:
        # build only the 32-bit architectures
        CIBW_ARCHS: auto32
        # unpack + build OpenBLAS in Docker. repo mounted to /project in image.
        CIBW_BEFORE_ALL: |
          tar -xf *.tar.gz && cd /project/$(echo OpenBLAS-*)
          make BINARY=32 USE_THREAD=1
          make PREFIX=${{ env.OPENBLAS_PATH }} install
        # build both manylinux1 and manylinux2010 for i686
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux }}
        # manually set OPENBLAS_PATH as part of env since we build in Docker.
        # can't set top-level env vars with other env vars (don't exist yet).
        CIBW_ENVIRONMENT: >-
          OPENBLAS_PATH=${{ env.OPENBLAS_PATH }}
          USE_OPENBLAS=${{ env.USE_OPENBLAS }}
    - name: Upload wheel artifacts
      id: upload-wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        if-no-files-found: error
    - name: Notify Slack on job failure and where the failure occurred
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] download-tar-gz: ${{ steps.download-tar-gz.outcome }}
          [step] cibuildwheel: ${{ steps.cibuildwheel.outcome }}
          [step] upload-wheels: ${{ steps.upload-wheels.outcome }}
        color: danger

  # build 64-bit manylinux1, manylinux2010, MacOS wheels
  build_nix_64:
    runs-on: ${{ matrix.os }}
    needs: get_openblas
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        manylinux: [manylinux1, manylinux2010]
        # don't want to build MacOS wheels twice for no reason
        exclude:
        - os: macos-latest
          manylinux: manylinux2010
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      id: download-tar-gz
      with:
        name: openblas-tar-gz
    # on MacOS runner, OpenBLAS fails to detect Fortran compiler despite
    # gfortran-9, -10, -11. being installed. for consistency we use gcc-9.
    # no /project prefix for MacOS building (not on Docker).
    - name: Use gcc, gfortran on ubuntu-latest and set /project prefix
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        echo "OPENBLAS_CC=gcc" >> $GITHUB_ENV
        echo "OPENBLAS_FC=gfortran" >> $GITHUB_ENV
        echo "FS_PREFIX=/project" >> $GITHUB_ENV
    - name: Use gcc-9, gfortran-9 on macos-latest and set workspace prefix
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        echo "OPENBLAS_CC=gcc-9" >> $GITHUB_ENV
        echo "OPENBLAS_FC=gfortran-9" >> $GITHUB_ENV
        echo "FS_PREFIX=${{ github.workspace }}" >> $GITHUB_ENV
    - name: Build and test wheels
      id: cibuildwheel
      uses: pypa/cibuildwheel@v2.0.1
      with:
        output-dir: dist
      env:
        # build only the 64-bit architectures
        CIBW_ARCHS: auto64
        # note BINARY=64. can't use INTERFACE64=1 with SYMBOLSUFFIX but the
        # code doesn't use suffixed [C]BLAS routines. for some reason need to
        # explicitly set NO_LAPACKE else LAPACKE headers not installed on MacOS.
        CIBW_BEFORE_ALL: |
          tar -xf *.tar.gz && cd ${{ env.FS_PREFIX }}/$(echo OpenBLAS-*)
          make BINARY=64 USE_THREAD=1 CC=${{ env.OPENBLAS_CC }} \
            FC=${{ env.OPENBLAS_FC }}
          make PREFIX=${{ env.OPENBLAS_PATH }} NO_LAPACKE= install
        # build both manylinux1 and manylinux2010 for x86-64, i686
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux }}
        # see comment for CIBW_ENVIRONMENT in build_nix_32
        CIBW_ENVIRONMENT: >-
          OPENBLAS_PATH=${{ env.OPENBLAS_PATH }}
          USE_OPENBLAS=${{ env.USE_OPENBLAS }}
    - name: Upload wheel artifacts
      id: upload-wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        if-no-files-found: error
    - name: Notify Slack on job failure and where the failure occurred
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}[${{ matrix.os }}]: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] download-tar-gz: ${{ steps.download-tar-gz.outcome }}
          [step] cibuildwheel: ${{ steps.cibuildwheel.outcome }}
          [step] upload-wheels: ${{ steps.upload-wheels.outcome }}
        color: danger

  # build win32 and amd64 Windows wheels using prebuilt OpenBLAS
  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        # need to build win32, amd64 in separate jobs
        arch: [auto32, auto64]
    defaults:
      run:
        # use Bash instead of PowerShell
        shell: bash
    steps:
    - uses: actions/checkout@v2
    # depending on matrix.arch, set a different release download match pattern
    - name: Set gh release download pattern match (auto32)
      if: matrix.arch == 'auto32'
      run: echo "OPENBLAS_MATCH='*-x86.zip'" >> $GITHUB_ENV
    - name: Set gh release download pattern match (auto64)
      if: matrix.arch == 'auto64'
      run: echo "OPENBLAS_MATCH='*-x64.zip'" >> $GITHUB_ENV
    - name: Build and test wheels
      id: cibuildwheel
      uses: pypa/cibuildwheel@v2.0.1
      with:
        output-dir: dist
      env:
        CIBW_ARCHS: ${{ matrix.arch }}
        # download latest OpenBLAS zipped binaries and unpack to OPENBLAS_PATH
        CIBW_BEFORE_BUILD: |
          ${{ env.CIBW_BEFORE_BUILD }}
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release download -R xianyi/OpenBLAS -p ${{ env.OPENBLAS_MATCH }}
          #mkdir ${{ env.OPENBLAS_PATH }}
          mkdir ${{ github.workspace }}\OpenBLAS
          unzip *.zip -d ${{ github.workspace }}\OpenBLAS
    - name: Upload wheel artifacts
      id: upload-wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        if-no-files-found: error
    - name: Notify Slack on job failure and where the failure occurred
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}[${{ matrix.arch }}]: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] cibuildwheel: ${{ steps.cibuildwheel.outcome }}
          [step] upload-wheels: ${{ steps.upload-wheels.outcome }}
        color: danger

  # notifies final job success if all jobs succeeded
  notify_success:
    runs-on: ubuntu-latest
    needs: [build_sdist, build_nix_32, build_nix_64, build_windows]
    steps:
    - name: Notify Slack on overall workflow success
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: "[workflow] ${{ github.workflow }}: ${{ job.status }}"
        color: good